function updateControlDisplay(src,~)
    % This function adds text boxes to the control window, and updates the
    % Influence vs Distance plot as needed.
    
    % This function is meant to be used as a callback function assigned to
    % the slider bars.
    
    persistent annot clr offset
    if isempty(clr)
        clr = 'w';
        offset = [0.0075 0.006];
    end
    
    % src.Tag must have a value, but it will not the first time this
    % function is called (when we plot the first figure).
    if nargin < 1; src.Tag = 'init'; end
    
    % This is bad practice!  Better than global variables? :-)
    % It would be better to pass these variables to the function,
    % but I couldn't figure out how to do that.  The function is the
    % callback function invoked when slider bars change, and I think I
    % would need to restructure quite a bit of code.  So, I'm making liberal
    % use of the evalin command which is not recommended!
    cWin = evalin('base', 'ctrlWindow');
    c = evalin('base', 'controls');
    Nosc = evalin('base', 'Nosc');
    
    %% Only update values that need updating!
    if any(strcmp(src.Tag, {'k','init'}))
        evalin('base',['s.k = ' num2str(c.kSlider.Value) ';']);
        try
            delete(annot.k)
            % There is no need for a catch statement here.  The delete
            % command will throw an error the first time this function is
            % called and can be safely ignored.
        end
        annot.k = annotation(cWin, ...
                    'textbox', [c.kSlider.Position([3 2]) + offset 0.1 0.05], ...
                    'string', ['$k=' num2str(c.kSlider.Value, '%.3f') '$'], ...
                    'edgecolor', 'none', ...
                    'color', clr, ...
                    'fontsize', 20, ...
                    'interpreter', 'latex');
    end
    if any(strcmp(src.Tag, {'dt','init'}))
        evalin('base',['s.dt = ' num2str(c.dtSlider.Value) ';']);
        try
            delete(annot.dt)
        end
        annot.dt = annotation(cWin, ...
                    'textbox', [c.dtSlider.Position([3 2]) + offset 0.1 0.05], ...
                    'string', ['$dt=' num2str(c.dtSlider.Value, '%.4f') '$'], ...
                    'edgecolor', 'none', ...
                    'color', clr, ...
                    'fontsize', 20, ...
                    'interpreter', 'latex');
    end
    if any(strcmp(src.Tag, {'noise','init'}))
        evalin('base',['s.noise = ' num2str(c.noiseSlider.Value) ';']);
        try
            delete(annot.noise)
        end
        annot.noise = annotation(cWin, ...
                    'textbox', [c.noiseSlider.Position([3 2]) + offset 0.1 0.05], ...
                    'string', ['$|\xi|=' num2str(c.noiseSlider.Value, '%.2f') '$'], ...
                    'edgecolor', 'none', ...
                    'color', clr, ...
                    'fontsize', 20, ...
                    'interpreter', 'latex');
    end
    if any(strcmp(src.Tag, {'param','init'}))
        evalin('base',['s.funParams = ' num2str(c.paramSlider.Value) ';']);
        evalin('base', 'fDist = SpatialInfluence(dist, s.fun, s.funParams);');
        try
            delete(annot.param)
        end
        annot.param = annotation(cWin, ...
                    'textbox', [c.paramSlider.Position([3 2]) + offset 0.1 0.05], ...
                    'string', ['$\alpha=' num2str(c.paramSlider.Value, '%.2f') '$'], ...
                    'edgecolor', 'none', ...
                    'color', clr, ...
                    'fontsize', 20, ...
                    'interpreter', 'latex');
    end
    if any(strcmp(src.Tag, {'metric','init'}))
        evalin('base',['s.metric = ' num2str(c.metricSlider.Value) ';']);
        evalin('base', 'dist = GetDistances(pos, s.metric);');
        evalin('base', 'fDist = SpatialInfluence(dist, s.fun, s.funParams);');
        try
            delete(annot.metric)
        end
        annot.metric = annotation(cWin, ...
                    'textbox', [c.metricSlider.Position([3 2]) + offset 0.1 0.05], ...
                    'string', ['$p=' num2str(c.metricSlider.Value, '%.1f') '$'], ...
                    'edgecolor', 'none', ...
                    'color', clr, ...
                    'fontsize', 20, ...
                    'interpreter', 'latex');
    end
    if any(strcmp(src.Tag, {'fun','init'}))
        evalin('base',['s.fun = ''' c.funSlider.String{c.funSlider.Value} ''';']);
        evalin('base', 'fDist = SpatialInfluence(dist, s.fun, s.funParams);');
        try
            delete(annot.fun)
        end
        annot.fun = annotation(cWin, ...
                    'textbox', [c.funSlider.Position([3 2]) + offset 0.1 0.05], ...
                    'string', c.funSlider.String{c.funSlider.Value}, ...
                    'edgecolor', 'none', ...
                    'color', clr, ...
                    'fontsize', 20, ...
                    'interpreter', 'latex');
    end
    if any(strcmp(src.Tag, {'color','init'}))
        evalin('base',['s.ColorMode = ' num2str(c.colorSlider.Value) ';']);
        try
            delete(annot.color)
        end
        annot.color = annotation(cWin, ...
                    'textbox', [c.colorSlider.Position([3 2]) + offset 0.1 0.05], ...
                    'string', ['$C_{mode}=' num2str(c.colorSlider.Value) '$'], ...
                    'edgecolor', 'none', ...
                    'color', clr, ...
                    'fontsize', 20, ...
                    'interpreter', 'latex');
    end
    
    %% Update the distance function display if any distance related params changed
    if any(strcmp(src.Tag, {'init', 'fun', 'param', 'metric'}))
        d = unique(evalin('base', '[dist(:) fDist(:)]'),'rows');
        dPlot = subplot(5,5, [2:4 7:9 12:14],'parent',cWin);
        scatter(d(:,1),d(:,2),'.r', 'parent', dPlot);
        xlabel(dPlot, 'Distance')
        ylabel(dPlot, 'Influence')
    end
end